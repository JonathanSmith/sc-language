#!/bin/bash

usage()
{
    echo "usage: $0 [[-n <n_autorun_worker_nodes>] -c <worker_command>] [-w <n_wait_node>] -i <initial_task> -s <server_hostname> [-h <hostname>] [-p <port_num>] [-g <start_hostname>] [-e <# child servers>] [-E <child-server-list-file>] [-M] [-l <alisp or sbcl>] [-C <force_compile_level>]"
    echo "Options, Defaults:"
    echo "  -n: 1 (if '-c' is given)"
    echo "  -c: Must be specified when '-n' is given"
    echo "  -w: 1 if '-c' is not given, =<-n>+<-e> if '-c' is given"
    echo "  -i,-s: Either must be given by cmdline"
    echo "  -h: The hostname by which the children can access the parent server."
    echo "  -p: 9865"
    echo "  -g: If specified, use 'gxpc e' to invoke workers"
    echo "      (cf. http://www.logos.ic.i.u-tokyo.ac.jp/gxp/index.php)"
    echo "      Add the directories of the worker command and tcpcon to PATH"
    echo "  -e: 0"
    echo "  -E: \"child-servers\""
    echo "  -M: If 1 is specified, # of nodes in child clusters are specified in the child server list file (rather than -n)"
    echo "  -l: alisp"
    echo "  -L: Create a log file named \"<specified name>-<date><time>\""
    echo "  -C: Force compile all lisp files when 1 is specified. Force compie only server.lsp when 2 is specified."
    echo "Example:"
    echo "  # Run a single server and 2 worker processes in node200 and node201 to compute fib(44)"
    echo "  $0 -n 2 -c ./fib-lw -i \"1 44\" -h localhost -p 9865 -l sbcl -g node200"
    echo "  # Run a single parent and 1 child servers. For each server, 8 worker process"
    echo "  # (8 workers will run in each process) is run to compute fib(50)"
    echo "  $0 -n 8 -c 'fib-lw -n8' -i \"1 50\" -h chiba200.intrigger.nii.ac.jp -g chiba200 -e 1 -l sbcl"
    echo "  (Child server nodes must be ready for 'gxpc e' command.)"
    exit 1;
}

DATE=`date +%m%d%y-%H%M%S`

# defaults
SERVER_CMDLINE="server-cmdline.lsp"
PORT_NUM=9865
LISP=alisp
N_EXTERNAL_SITES=0
EXTERNAL_SITE_FILE="child-servers"
MAX_CHILD_NODE=0
SERVER_LOG=0
FORCE_COMPILE=0
USE_TEXT_SOCKET=0

# getopts
while getopts n:c:w:i:s:h:p:g:e:E:M:l:T:L:C: opt
do
    case ${opt} in
        n)
            NNODE=${OPTARG};;
        c)
            WORKER_CMD=${OPTARG};;
        w)
            N_WAIT_NODE=${OPTARG};;
        i)
            INITIAL_TASK=${OPTARG};;
        s)
            SERVER=${OPTARG};;
        h) 
            HOSTNAME=${OPTARG};;
        p)
            PORT_NUM=${OPTARG};;
        g)
            GXP_START_HOST=${OPTARG};;
        e)
            N_EXTERNAL_SITES=${OPTARG};;
        E)
            EXTERNAL_SITE_FILE=${OPTARG};;
        M)
            MAX_CHILD_NODE=${OPTARG};;
        l)
            LISP=${OPTARG};;
        T)
            USE_TEXT_SOCKET=${OPTARG};;
        L)
            SERVER_LOG=${OPTARG};;
        C)
            FORCE_COMPILE=${OPTARG};;
        *)
            echo "Unknown command line option: ${opt}"
            usage $@;;
    esac
done

# Check options and set defaults if necessary
if [ "x$NNODE" = 'x' ]; then
    NNODE=0
else
    if [ "x$WORKER_CMD" = 'x' ]; then
        echo "WORKER_CMD (-c) must be specified when -n is given"
        usage $@
    fi
fi
if [ "x$N_WAIT_NODE" = 'x' ]; then
    if [ $NNODE = 0 ]; then
        N_WAIT_NODE=1
    else
        N_WAIT_NODE=$(($NNODE+$N_EXTERNAL_SITES))
    fi
fi
if [ $N_EXTERNAL_SITES -gt 0 ]; then
    if [ ! -f $EXTERNAL_SITE_FILE ]; then
        echo "Child-server-list-file does not exist: $EXTERNAL_SITE_FILE"
        exit 1
    fi
fi
if [ "x$INITIAL_TASK" = 'x' -a "x$SERVER" = 'x' ]; then
    echo "Neither INITIAL_TASK (-i) nor SERVER (-s) is specified"
    usage $@
fi
if [ "x$INITIAL_TASK" != 'x' ]; then
    PARENT_OPT='-i'
    PARENT_OPT_ARG=$INITIAL_TASK
fi
if [ "x$SERVER" != 'x' ]; then
    PARENT_OPT='-s'
    PARENT_OPT_ARG=$SERVER
fi
if [ "x$HOSTNAME" = 'x' ]; then
    HOSTNAME=`hostname`
    echo "-h is not given. Use $HOSTNAME"
fi

set -x

# run server
if [ $LISP = 'alisp' ]; then
    "$LISP" -batch -L $SERVER_CMDLINE -- -h $HOSTNAME -p $PORT_NUM -w $N_WAIT_NODE $PARENT_OPT "$PARENT_OPT_ARG" -T $USE_TEXT_SOCKET -L "$SERVER_LOG.$DATE" -C $FORCE_COMPILE &
elif [ $LISP = 'sbcl' ]; then
    "$LISP" --script $SERVER_CMDLINE -h $HOSTNAME -p $PORT_NUM -w $N_WAIT_NODE $PARENT_OPT "$PARENT_OPT_ARG" -T $USE_TEXT_SOCKET -L "$SERVER_LOG.$DATE" -C $FORCE_COMPILE &
else
    echo "Unknown Lisp Implementation: $LISP"
    exit 1
fi

# run child servers
if [ $N_EXTERNAL_SITES -gt 0 ]; then
    sleep 5
    grep -v '^#' $EXTERNAL_SITE_FILE | head -n $N_EXTERNAL_SITES | while read line; do
        LOGINID=`echo $line | awk '{ print $1 }'`
        SITE=`echo $line | awk '{ print $2 }'`
        START=`echo $line | awk '{ print $3 }'`
        if [ $MAX_CHILD_NODE -gt 0 ]; then
            NNODE_CHILD=`echo $line | awk '{ print $4 }'`
        else
            NNODE_CHILD=$NNODE
        fi
        if [ "x$SERVER_LOG" != 'x' ]; then
            CHILD_LOG="$START.log.$DATE"
        else
            CHILD_LOG=0
        fi
        ssh -l $LOGINID -f $SITE "kill-tcell; cd $PWD; tcell-batch -n $NNODE_CHILD -c \"$WORKER_CMD\" -s $HOSTNAME -p $PORT_NUM -g $START -l $LISP -T $USE_TEXT_SOCKET -C $FORCE_COMPILE -L $CHILD_LOG"
    done
fi

# run worker processes that directly connect to the parent server
if [ $NNODE -gt 0 ]; then
    sleep 5
    if [ "x$GXP_START_HOST" = 'x' ]; then
        i=1
        while [ $i -lt $NNODE ]; do
            tcpcon $HOSTNAME $PORT_NUM $WORKER_CMD &
            sleep 1
            i=`expr $i + 1`
        done
        # ./tcpcon $HOSTNAME $PORT_NUM $WORKER_CMD
        tcpcon $HOSTNAME $PORT_NUM $WORKER_CMD
    else
        HOSTS=`mk-hostnames.pl $GXP_START_HOST $NNODE`
        gxpc e -h $HOSTS tcpcon $HOSTNAME $PORT_NUM $WORKER_CMD
    fi
fi

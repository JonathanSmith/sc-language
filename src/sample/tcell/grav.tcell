;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; Computes a total force exerted by (2n+1)^3 uniform particles.

;; task 0 0 0 1
;; <minx>
;; <miny>
;; <minz>
;; <maxx>
;; <maxy>
;; <maxz>
;; <100*x>
;; <100*y>
;; <100*z>

(c-exp "#include<sys/time.h>")

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL RAWC)
(%include "rule/tcell-setrule.sh")

(%include "clib.sh")
(%include "dprint.sh")
(%cinclude "sendrecv.h" (:macro))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def (csym::elapsed-time tp) 
    (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def (task gravity)
  (def f (array double 3))   ; result
  (def rf (array double 3))  ; 小さい値を蓄積してく場所
  (def minx int :in)
  (def miny int :in)
  (def minz int :in)
  (def maxx int :in)
  (def maxy int :in)
  (def maxz int :in)
  (def cur (array double 3))  ; 入力座標：ここへの重力ベクトルを計算
  ;;(def dummy (array char 4000))
  )
  
(def (task-sender gravity)
  (csym::send-doubles (fref this cur) 3))

(def (task-receiver gravity)
  (csym::recv-doubles (fref this cur) 3))

(def (rslt-sender gravity)
  (csym::send-doubles (fref this f) 3))

(def (rslt-receiver gravity)
  (csym::recv-doubles (fref this f) 3))


(decl (grav-x minx miny minz maxx maxy maxz tsk)
      (wfn void
           int int int int int int (ptr (struct gravity))))

(def (task-body gravity)
  (def i int)
  (for ((= i 0) (< i 3) (inc i))
    (= (aref (fref this f) i)  0.0))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref (fref this rf) i) 0.0))
  (DEBUG-PRINT 1 "start (%d, %d, %d)--(%d, %d, %d): (%lf, %lf, %lf)~%"
               (fref this minx)
               (fref this miny)
               (fref this minz)
               (fref this maxx)
               (fref this maxy)
               (fref this maxz)
               (aref (fref this cur) 0)
               (aref (fref this cur) 1)
               (aref (fref this cur) 2))
  (grav-x (fref this minx)
          (fref this miny)
          (fref this minz)
          (fref this maxx)
          (fref this maxy)
          (fref this maxz)
          (ptr this))
  (for ((= i 0) (< i 3) (inc i))
    (+= (aref (fref this f) i) (aref (fref this rf) i))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def (task start-gravity)
  (def minx int :in)
  (def miny int :in)
  (def minz int :in)
  (def maxx int :in)
  (def maxy int :in)
  (def maxz int :in)
  (def curx int :in)
  (def cury int :in)
  (def curz int :in))


(def (task-body start-gravity)
  (def tsk (struct gravity))
  (def i int)
  (decl tp (array (struct timeval) 2))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref (fref tsk f) i)  0.0))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref (fref tsk rf) i) 0.0))
  (= (fref tsk minx) (fref this minx))
  (= (fref tsk miny) (fref this miny))
  (= (fref tsk minz) (fref this minz))
  (= (fref tsk maxx) (fref this maxx))
  (= (fref tsk maxy) (fref this maxy))
  (= (fref tsk maxz) (fref this maxz))
  (= (aref (fref tsk cur) 0) (/ (cast double (fref this curx)) 100))
  (= (aref (fref tsk cur) 1) (/ (cast double (fref this cury)) 100))
  (= (aref (fref tsk cur) 2) (/ (cast double (fref this curz)) 100))
  (csym::fprintf stderr "start (%d, %d, %d)--(%d, %d, %d): (%lf, %lf, %lf)~%"
                 (fref tsk minx)
                 (fref tsk miny)
                 (fref tsk minz)
                 (fref tsk maxx)
                 (fref tsk maxy)
                 (fref tsk maxz)
                 (aref (fref tsk cur) 0)
                 (aref (fref tsk cur) 1)
                 (aref (fref tsk cur) 2))
  (csym::gettimeofday tp 0)
  (grav-x (fref tsk minx)
          (fref tsk miny)
          (fref tsk minz)
          (fref tsk maxx)
          (fref tsk maxy)
          (fref tsk maxz)
          (ptr tsk))
  (for ((= i 0) (< i 3) (inc i))
    (+= (aref (fref tsk f) i) (aref (fref tsk rf) i)))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "f=(%lf, %lf, %lf)~%"
                 (aref (fref tsk f) 0)
                 (aref (fref tsk f) 1)
                 (aref (fref tsk f) 2))
  (csym::fprintf stderr "time: %lf~%" (csym::elapsed-time tp))
  )
  
;;; (rslt-receiver cmp) = default

(def (grav-z x y minz maxz tsk)
    (wfn void
        int int int int (ptr (struct gravity)))
  (def i int)
  (do-many for z from minz to (+ maxz 1)
    (def dx double) (def dy double) (def dz double)
    (def one-d2th double) (def one-d3th double)
    (= dx (- (cast double x) (aref (fref tsk -> cur) 0)))
    (= dy (- (cast double y) (aref (fref tsk -> cur) 1)))
    (= dz (- (cast double z) (aref (fref tsk -> cur) 2)))
    (= one-d2th (/ 1.0 (+ (* dx dx) (* dy dy) (* dz dz))))
    (= one-d3th (* (csym::sqrt one-d2th) one-d2th))
    (+= (aref (fref tsk -> rf) 0) (* dx one-d3th))
    (+= (aref (fref tsk -> rf) 1) (* dy one-d3th))
    (+= (aref (fref tsk -> rf) 2) (* dz one-d3th))
    (for ((= i 0) (< i 3) (inc i))
      (if (or (> (aref (fref tsk -> rf) i) 1.0)
              (< (aref (fref tsk -> rf) i) -1.0))
          (begin
           (+= (aref (fref tsk -> f) i) (aref (fref tsk -> rf) i))
           (= (aref (fref tsk -> rf) i) 0.0))))
    (gravity
     (:put from i1 to i2
           (= (fref this minx) x)
           (= (fref this miny) y)
           (= (fref this minz) i1)
           (= (fref this maxx) x)
           (= (fref this maxy) y)
           (= (fref this maxz) (- i2 1))
           (= (aref (fref this cur) 0) (aref (fref tsk -> cur) 0))
           (= (aref (fref this cur) 1) (aref (fref tsk -> cur) 1))
           (= (aref (fref this cur) 2) (aref (fref tsk -> cur) 2)))
     (:get
      (def i int)
      (+= (aref (fref tsk -> rf) 0) (aref (fref this f) 0))
      (+= (aref (fref tsk -> rf) 1) (aref (fref this f) 1))
      (+= (aref (fref tsk -> rf) 2) (aref (fref this f) 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref (fref tsk -> rf) i) 1.0)
                (< (aref (fref tsk -> rf) i) -1.0))
           (begin
            (+= (aref (fref tsk -> f) i) (aref (fref tsk -> rf) i))
            (= (aref (fref tsk -> rf) i) 0.0))))))))

(def (grav-y x miny minz maxy maxz tsk)
    (wfn void
        int int int int int (ptr (struct gravity)))
  (do-many for y from miny to (+ maxy 1)
           (grav-z x y minz maxz tsk)
    (gravity
     (:put from i1 to i2
           (= (fref this minx) x)
           (= (fref this miny) i1)
           (= (fref this minz) (fref tsk -> minz))
           (= (fref this maxx) x)
           (= (fref this maxy) (- i2 1))
           (= (fref this maxz) (fref tsk -> maxz))
           (= (aref (fref this cur) 0) (aref (fref tsk -> cur) 0))
           (= (aref (fref this cur) 1) (aref (fref tsk -> cur) 1))
           (= (aref (fref this cur) 2) (aref (fref tsk -> cur) 2)))
     (:get
      (def i int)
      (+= (aref (fref tsk -> rf) 0) (aref (fref this f) 0))
      (+= (aref (fref tsk -> rf) 1) (aref (fref this f) 1))
      (+= (aref (fref tsk -> rf) 2) (aref (fref this f) 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref (fref tsk -> rf) i) 1.0)
                (< (aref (fref tsk -> rf) i) -1.0))
            (begin
             (+= (aref (fref tsk -> f) i) (aref (fref tsk -> rf) i))
             (= (aref (fref tsk -> rf) i) 0.0))))))))

(def (grav-x minx miny minz maxx maxy maxz tsk)
    (wfn void
        int int int int int int (ptr (struct gravity)))
  (do-many for x from minx to (+ maxx 1)
    (grav-y x miny minz maxy maxz tsk)
    (gravity
     (:put from i1 to i2
           (= (fref this minx) i1)
           (= (fref this miny) (fref tsk -> miny))
           (= (fref this minz) (fref tsk -> minz))
           (= (fref this maxx) (- i2 1))
           (= (fref this maxy) (fref tsk -> maxy))
           (= (fref this maxz) (fref tsk -> maxz))
           (= (aref (fref this cur) 0) (aref (fref tsk -> cur) 0))
           (= (aref (fref this cur) 1) (aref (fref tsk -> cur) 1))
           (= (aref (fref this cur) 2) (aref (fref tsk -> cur) 2)))
     (:get
      (def i int)
      (+= (aref (fref tsk -> rf) 0) (aref (fref this f) 0))
      (+= (aref (fref tsk -> rf) 1) (aref (fref this f) 1))
      (+= (aref (fref tsk -> rf) 2) (aref (fref this f) 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref (fref tsk -> rf) i) 1.0)
                (< (aref (fref tsk -> rf) i) -1.0))
            (begin
             (+= (aref (fref tsk -> f) i) (aref (fref tsk -> rf) i))
             (= (aref (fref tsk -> rf) i) 0.0))))))))

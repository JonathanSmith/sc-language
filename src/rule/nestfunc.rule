;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; LW-SC0(with typeinfo) -> SC-0(with incomplete typeinfo)
;;; :nestfunc-rename :nestfunc-type :nestfunc-temp が適用済みであること
;;;
;;; 入れ子関数の定義は
;;; (def (<identifier-list>) (lightweight <type-expression-list>) ...)

;;; to be rewritten as an extension of the sc0t-to-sc0t rule-set.

(define-ruleset nestfunc (sc0t-to-sc0t)
  (thread-creator ~pthread-create)
  (estack-size #.(* 4 65536))           ; 明示的スタックのサイズ（sizeof char）
  (all-in-estack nil)                   ; 局所変数などを全て明示的スタックに置く(= CL-SC)
  (use-builtin-expect t)                ; GCCの __builtin_expectを使って最適化する
  )

(scr:require "NESTFUNC-DEFS")

(defrule sc-program nestfunc
  (#?(,@declaration-list)
   (lw:with-nestfunc-environment
     (with1 ret (call-next-rule)
       ~((%include "rule/nestfunc.sh")
         ,@(lw:make-all-frame-decls)
         ,@ret) )))
  )

;;; declaration
(defrule external-declaration nestfunc
  (otherwise
   (lw:with-external-decl
     (lw:with-new-block
       (with1 ret (call-next-rule)
         ~(%splice ,.(lw:flush-frame-defs) ,. (lw:flush-static-var-defs) ,.(lw:flush-nestfunc-defs)
                   ,.(lw:flush-local-decls)
                   ,ret) )))))

(extendrule inlined-declaration nestfunc
  ;; variable
  (#?(,scs[storage-class-specifier] ,id[#'atom] ,texp {,init})
   (when (and (not (lw:top-level-p)) (pattern-variable-p init))
     (iwarn "A local variable definition~%~S~%contains initializer: ~
              has `:nestfunc-hoist' rule been applied?" x))
   (with1 texp-ret (type-expression! texp)
     (cond
      ((lw:top-level-p)
       ~(,scs ,id ,texp-ret ,@(if-pattern-variable init (list (initializer init)) nil)) )
      ((eq texp ~--label--)             ; local-label
       ;; フレーム復帰用コード（cdr部分）は、あとでlabelのある場所で追加
       (lw:finfo-add-local-label id)
       ~(%splice) )
      ((string= "static" (storage-class-specifier! scs :sc2c)) ; static local
       ;; 入れ子関数からも見えるように，名前を変えて外に出す
       (lw:add-static-var-def (lw:finfo-add-local id texp-ret :static
                                                  :init (if-pattern-variable init init)))
       ~(%splice) )
      (t
       ;; local variable:
       ;; 常にestack上で扱う変数は宣言せず，フレーム構造体への登録のみ行う
       (with* (init-ret (if-pattern-variable init (initializer! init))
               decl-ret (lw:finfo-add-local id texp-ret :var :init init-ret))
         ;; 例外（初期値が文字列 or 配列）
         (if (lw:estack-variable-p id)
             ~(%splice)
           decl-ret ))))))
  ;; function(top-level)
  ;; ・main以外の第一引数にespを追加
  ;; ・esp,estack(main), new-espの付加。call-idの追加
  ;; ・入れ子関数(closure-t)を呼ぶ関数ではargpを付加
  ;; ・復帰処理の挿入
  ;; ・efp, esp, new-expの初期化;
  ;; ・関数の引数の保存用変数を付加
  ;; ・関数の結果の保存用変数を付加 (<- tmp.ruleで)
  ;; ・フレーム情報構造体を付加して構造体の定義を外に出す
  ;; ・tmp_esp, argp, call-id, その他ローカル変数の追加
  ;; ・入れ子関数の定義を外に出して、関数内ではclosure-t型に
  ;; ・関数呼び出しをwhile( tmp-res = ... ){ <保存>,return,<復帰> } に変える。
  ;;   mainとその他では{ ... } のとこの処理が違う
  (#?(,scs[storage-class-specifier] (,fid[identifier] ,@id-list)
          (,fn-tag[function-tag] ,@texp-list) ,@body)
   (error-indent (format nil "In ordinary function ~S:" fid)
     ;; global functionとして登録
     (when (lw:top-level-p) (lw:add-global-func fid))
     ;; Cの関数ならなにもしない
     (when (or (cid-p fid) (eq 'csym::fn fn-tag))
       (return-from inlined-declaration x))
     (let* ((thr-orig-p (lw:thread-origin-p fid)) ; mainや生成されたスレッドの最初の関数には追加引数なし
            (add-arg-p (not thr-orig-p))
            (new-id-list (if add-arg-p (cons ~esp id-list) id-list)) ; 追加引数 esp
            (texp-rets (mapcar #'type-expression! texp-list))
            (new-texp-list (if add-arg-p (insert1 ~(ptr char) texp-rets 1) texp-rets))) ; 追加引数
       ;; 関数ポインタを局所変数として登録
       (unless (lw:top-level-p)
         (lw:finfo-add-local fid ~(ptr (,fn-tag ,@new-texp-list)) :var))
       ;; bodyがからっぽなら引数追加だけ行って終了
       (when (null body)
         (return-from inlined-declaration ~(,scs (,fid ,@new-id-list) (,fn-tag ,@new-texp-list)) ))
       (let ((lw:*current-func* (lw:make-finfo
                                 :name fid :ret-type (car texp-rets)
                                 :estack-var (search-ptr body)))
             (add-decl-list ()))        ;追加する宣言のリスト
         ;; frame構造体を新規登録
         (lw:get-frame fid)
         ;; 引数をframeに追加
         (loop for argid in id-list
             as argtype in (cdr texp-rets)
             do (lw:finfo-add-local argid argtype :var))

         ;; 先頭の宣言の追加
         (progn
           ;; estack: 明示的スタック
           ;; esp (main以外では追加引数): 明示的スタックポインタ+下位2ビットフラグ
           (when thr-orig-p
             (pushs (lw:finfo-add-local ~estack ~(array char ,lw:*estack-size*) :system)
                    (lw:finfo-add-local ~esp ~(ptr char) :system :init ~estack)
                    add-decl-list))
           ;; esp-flag: espの下位2ビットのフラグ部分
           ;;   最下位 -- スタック積み直し中フラグ
           ;;   下から2つめ -- 未使用
           (when (and (not thr-orig-p) (not lw:*all-in-estack*))
             (push (lw:finfo-add-local ~esp-flag ~size-t :system
                                       :init ~(bit-and (cast size-t esp) 3))
                   add-decl-list))
           ;; new-esp: espにフラグを追加したりして関数呼出しの引数にする
           (unless lw:*all-in-estack*
             (push (lw:finfo-add-local ~new-esp ~(ptr char) :system) add-decl-list))
           ;; efp: 明示的スタックフレームポインタ
           (push (lw:finfo-add-local ~efp ~(ptr (struct ,(lw:get-frame-name fid))) :system)
                 add-decl-list))

         (with* (body-ret (function-body body)
                 (body-ret-decl body-ret-body) (list-until body-ret ~%%stat :key #'car))
           ;; 入れ子関数callが存在した場合，
           ;; argp (入れ子関数call時のestack上にある引数へのポインタ)の宣言を追加
           (when (lw:finfo-argp lw:*current-func*)
             (push (lw:finfo-add-local ~argp ~(ptr char) :system) add-decl-list))
           ;; 最終的に必要な宣言を追加
           (setq body-ret-decl
             (nconc body-ret-decl
                    (nreverse add-decl-list)
                    ;; スタック積み直し時用の復帰処理
                    (lw:make-resume lw:*current-func*) 
                    ;; estackフレームポインタ初期化
                    (lw:make-init-efp-esp lw:*current-func*) 
                    (when lw:*all-in-estack*
                      (nconc
                       ;; CL-SC時，引数の値をestackに保存
                       (lw:save-args-into-estack id-list (cdr texp-rets))
                       ;; CL-SC時，入れ子関数をここで初期化（LW-SCと違って遅延されない）
                       (lw:make-normalize-nf)))))
           ;; フレーム構造体の定義を作って登録
           (lw:add-frame-def (lw:make-frame-def lw:*current-func*))
           ;; 関数定義の変換結果
           ~(,scs (,fid ,@new-id-list) (,fn-tag ,@new-texp-list)
                  ,.body-ret-decl ,@body-ret-body) )))))

  ;; lightweightの関数宣言
  ;; ・引数と返り値の型を変更。
  ;; ・関数の先頭でestackから引数の値を受け取る処理を追加
  ;; ・別途statement規則でreturnをいじる必要
  (#?(,scs[storage-class-specifier] (,fid[identifier] ,@id-list[identifier])
          (lightweight ,@texp-list) ,@body)
   (error-indent (format nil "In nested function ~S:" fid)
     (let* ((parent-name (lw:finfo-name lw:*current-func*))
            (parent-func lw:*current-func*)
            (extid (lw:make-extid fid))
            (texp-rets (mapcar #'type-expression texp-list))) ;外に出す関数名
       ;; 入れ子関数リストに追加
       (lw:finfo-add-nestfunc fid extid)
       ;; ここで *current-func* をバインド
       (let ((lw:*current-func* (lw:make-finfo :name extid
                                               :parent-func parent-func
                                               :ret-type (car texp-rets)
                                               :estack-var (search-ptr body)))
             (add-decl-list nil))       ;追加の変数定義
         ;; frame構造体を新規登録
         (lw:get-frame extid)
         ;; 先頭の宣言の追加
         (progn
           ;; new-esp: esp + 呼出し先の関数に渡す下位2ビットフラグ
           (unless lw:*all-in-estack*   ; LW-SCのみ
             (push (lw:finfo-add-local ~new-esp ~(ptr char) :system) add-decl-list) )
           ;; efp: etack上のフレームポインタ
           (push (lw:finfo-add-local ~efp ~(ptr (struct ,(lw:get-frame-name extid))) :system)
                 add-decl-list)
           ;; xfp: 親関数のetack上のフレームポインタ
           (push (lw:finfo-add-local ~xfp
                                     ~(ptr (struct ,(lw:get-frame-name parent-name)))
                                     :var :init ~xfp0)
                 add-decl-list)
           ;; esp-flag: espの下位2ビットフラグ
           (unless lw:*all-in-estack*   ; LW-SCのみ
             (push (lw:finfo-add-local ~esp-flag ~size-t :system
                                       :init ~(bit-and (cast size-t esp) 3))
                   add-decl-list) )
           ;; parmp: 引数受け取りの作業用変数
           (push (lw:finfo-add-local ~parmp ~(ptr char) :system :init (lw:make-parmp-init))
                 add-decl-list) )

         ;; 引数を明示的スタックのトップからpopしながら獲得
         (loop
             for argid in id-list
             as argtp in (cdr texp-rets)
             do (with1 decl (lw:finfo-add-local argid argtp :var)
                  (unless lw:*all-in-estack* ; CL-SCではestackを直接参照するので不要
                    (push ~(,@decl (pop-arg ,argtp parmp))
                          add-decl-list) )))

         (with1 body-ret (function-body body)
           (multiple-value-bind (body-ret-decl body-ret-body)
               (list-until body-ret ~%%stat :key #'car)
             ;; 入れ子関数callが存在した場合，
             ;; argp (入れ子関数call時のestack上にある引数へのポインタ)の宣言を追加
             (when (lw:finfo-argp lw:*current-func*)
               (push (lw:finfo-add-local ~argp ~(ptr char) :system) add-decl-list))
             ;; 最終的に必要な宣言を追加
             (setq body-ret-decl
               (nconc body-ret-decl
                      (nreverse add-decl-list)
                      ;; スタック積み直し時の復帰処理
                      (lw:make-resume lw:*current-func*)
                      ;; estackフレームポインタ初期化
                      (lw:make-init-efp-esp lw:*current-func*)
                      (when lw:*all-in-estack*
                        (nconc
                         ;; CL-SC時，引数の値をestackに保存
                         (lw:save-args-into-estack id-list (cdr texp-rets))
                         ;; CL-SC時，入れ子関数をここで初期化（LW-SCと違って遅延されない）
                         (lw:make-normalize-nf)))) )
             ;; フレーム構造体定義を作って登録
             (lw:add-frame-def (lw:make-frame-def lw:*current-func*))
             ;; 関数定義をトップレベルに
             (lw:add-nestfunc-def
              ~(,scs (,extid esp xfp0) (fn (ptr char) (ptr char) (ptr void))
                     ,.body-ret-decl ,@body-ret-body (return 0))) )))
       ;; 入れ子関数はestack内のものを参照するので親関数内での宣言は不要
       ~(%splice) )))
  )

(extendrule type-expression nestfunc
  (#?(lightweight ,@texps) ~closure-t)
  (#?(fn ,@texps)
   (let ((texp-rets (mapcar #'type-expression texps)))
     ~(fn ,(car texp-rets) (ptr char) ,@(cdr texp-rets)) )))

;;; Function body & block item:
;;; * with-new-blockの追加
;;; * 各block-itemにdeclかstatかを識別できるタグを付与
(defrule function-body nestfunc
  (#?({:attr ,f-attr} { ,r-decl[register-declarator] } ,@bi-list)

   (lw:with-new-block
       (with* (attr-ret (if-pattern-variable f-attr (list ~(:attr ,(function-attribute! f-attr))))
               regdecl-ret (if-pattern-variable r-decl (list (get-retval r-decl)))
               body-ret (loop for bi in bi-list
                            nconc (with1 (bi-ret tag) (block-item bi)
                                    (list tag bi-ret))))
         ~(,.(lw:flush-local-decls) ,.attr-ret ,.regdecl-ret ,@body-ret) )))
  )

(defrule block-item nestfunc
  (#?,bi[inlined-declaration] (values (get-retval bi) ~%%decl))
  (#?,bi[statement]           (values (get-retval bi) ~%%stat)))

;;; body
(extendrule statement nestfunc
  ;; label
  (#?(label ,id ,stat)
   ;; 局所ラベルとして宣言済のラベルに対して、
   ;; 入れ子関数からgotoで脱出してきたとき用の復帰情報を付与
   (multiple-value-bind (lab-level llab-info)
       (lw:finfo-find-local-label id)
     (when (and lab-level (= lab-level 0))
       (rplacd llab-info (lw:make-frame-resume lw:*current-func*))))
   (call-next-rule))
  ;; goto
  (#?(goto ,id)
   (multiple-value-bind (lab-level llab-info labnum)
       (lw:finfo-find-local-label id)
     (declare (ignore llab-info))
     (if (or (null lab-level) (= lab-level 0)) ; __label__で定義されていないか，親関数のラベルではない場合
         x                              ; 通常のgoto
       ;; 親関数へのgotoによる脱出：
       ;; nested-funcからreturnのようにCスタックを巻き戻すが，呼出し元までではなく，
       ;; ジャンプ先の親（祖先）関数のところまで巻き戻す．その後，指定されたラベルの場所に
       ;; 通常のgotoで飛ぶ．ジャンプ先はetack上のcall-idによる条件分岐で特定（return時と同様）．
       (let* ((xfp-exp (butlast         ; ジャンプ先関数のestack上のフレームポインタ
                        ~(fref
                          ,@(apply #'append
                                   (make-list lab-level
                                              :initial-element ~(xfp ->))))))
              (callid-exp ~(,@xfp-exp -> call-id)))
         ~(begin
           (= ,callid-exp ,(- labnum))  ; goto先のcall-id書き換え
           (return (cast (ptr char) ,xfp-exp))) )))) ; goto先のefpをreturn
  ;; 返り値なしreturn
  (#?(return)
   (if (lw:finfo-parent-func lw:*current-func*)
       ~(return 0)                      ; 入れ子関数なら正常終了を示す0を返す
     ~(return) ))
  ;; 返り値つきreturn
  (#?(return ,exp)
   (with1 exp-ret (expression! exp)
     (if (lw:finfo-parent-func lw:*current-func*) ; 入れ子関数の場合
         ~(begin
           (= (mref-t ,(lw:finfo-ret-type lw:*current-func*) efp) ,exp-ret)
           (return 0))             ; return自体の返り値は正常終了を示す0
       ~(return ,exp-ret) )))           ; 入れ子関数でなければ普通にreturn
  )

;;; expression (with type-info)

;;; :nestfunc-temp の変換結果により、callは
;;; #1=(the ,texp (call (the ,texp ,exp) ,@exp-list))  ; 代入なし
;;; か，
;;; (the ,texp (= (the ,texp ,id) #1#))                ; 代入あり
;;; のどちらかの形で現れるようになっている。

(defrule thread-creator nestfunc
  (#?,id[#'(lambda (xx) (eq xx (ruleset-param 'thread-creator)))]
   t)
  )

(extendrule expression nestfunc
  ;; thread-create (typically pthread-create)
  ;; thread-origin 関数を中継してstart-routineを呼びだす．
  ;; thread-origin は新しいestackなどを用意するライブラリ関数．
  ((#?#1=(the ,texp (call (the ,texp-p ,exp-f[thread-creator])
                          ,thread ,attr ,start-routine ,arg))
    #?(the ,texp0 (= (the ,texp1 ,id) #1#)) )
   (let* ((farg-id (generate-id "farg"))
          (farg-decl (lw:finfo-add-local farg-id ~(ptr (struct func-arg)) :system))
          (tcreate-exp                  ; func-arg構造体: もともとのfuncとargをパック
           ~(exps (= ,farg-id (cast (ptr (struct func-arg))
                                (csym::malloc (sizeof (struct func-arg)))))
                  (= (fref ,farg-id -> func) ,start-routine)
                  (= (fref ,farg-id -> arg) ,arg)
                  (pthread-create ,(expression! thread) ,(expression! attr)
                                  thread-origin ,farg-id))))
     (lw:add-local-decl farg-decl)
     (if-pattern-variable id            ; assignment expression?
         ~(the ,texp0 (= ,(expression! ~(the ,texp1 ,id)) ,tcreate-exp))
       tcreate-exp )))
  ;; 通常のfunction-call
  ;; ・引数の値を保存
  ;; ・呼び出す関数のポインタも保存
  ((#?#2=(the ,texp (call (the (ptr (,fn-tag[function-tag] ,@texp-list)) ,exp-f)
                          ,@exp-list))
    #?(the ,texp0 (= (the ,texp1 ,id) #2#)) )
   (with* (id-ret (if-pattern-variable id (expression! ~(the ,texp1 ,id)))
           fexp ~(the (ptr (,fn-tag ,@texp-list)) ,exp-f)
           fexp-ret (expression! fexp)
           rettype-ret (type-expression! (car texp-list))
           exp-rets (mapcar #'expression! exp-list))
     (declare (ignorable id-ret rettype-ret))
     ;; Cの関数ならなにもしない
     (when (or (cid-p exp-f) (eq 'csym::fn fn-tag))
       (with1 r-exp ~(the ,texp (call ,fexp-ret ,@exp-rets))
         (return-from expression (if-pattern-variable id
                                                      ~(= ,id-ret ,r-exp)
                                                      r-exp)) ))
     (let* ((decl-prev-tmpid-list
             ;; 副作用を何回も起こさないように関数ポインタと引数の値を一時変数に保存
             ;; そのために必要な宣言，先行の式，一時変数名をcollect
             (loop
                 for exp-ret in (cons fexp-ret exp-rets)
                 if (lw:simple-exp-p exp-ret)
                 collect (list nil nil exp-ret)
                 else
                 collect (with (id-tmp (generate-id "nf_tmp")
                                type-tmp (array2ptr (gettype exp-ret)))
                           (list (lw:finfo-add-local id-tmp type-tmp :var)
                                 ~(= ,id-tmp ,fexp-ret)
                                 id-tmp)) ))
            (decl-list (remove nil (mapcar #'first decl-prev-tmpid-list)))
            (prev-list (remove nil (mapcar #'second decl-prev-tmpid-list)))
            (tmpid-list (mapcar #'third decl-prev-tmpid-list))
            (fcall-exp ~(call ,(car tmpid-list)
                              ,(if lw:*all-in-estack* ~esp ~new-esp) ; 追加引数
                              ,@(cdr tmpid-list)))
            (eq-exp (if-pattern-variable id ; 返り値による正常終了判定
                        ~(== (= ,id-ret ,fcall-exp) (SPECIAL ,rettype-ret))))
            (neq-exp ~(!= (= (fref efp -> tmp-esp) ; フレームポインタによる正常終了判定
                             (mref-t (ptr char) esp))
                          0)))
       (declare (ignorable eq-exp))
       (unless lw:*all-in-estack* (push ~(= new-esp esp) prev-list))
       (dolist (decl decl-list) (lw:add-local-decl decl))
       ;; 以下が返り値（変換結果）
       ~(begin
         ,.prev-list
         (while ,(if-pattern-variable id
                     (if (ruleset-param 'use-builtin-expect)
                         ~(and (csym::--builtin-expect ,eq-exp 0)
                               (csym::--builtin-expect ,neq-exp 1))
                       ~(and ,eq-exp ,neq-exp))
                   (if (ruleset-param 'use-builtin-expect)
                       ~(exps ,fcall-exp
                              (csym::--builtin-expect ,neq-exp 0))
                     ~(exps ,fcall-exp ,neq-exp)))
           ;; 関数が正常終了しなかったとき (LW-SC時の入れ子関数call or gotoによる脱出）
           ;; 以下が実行される
           ,@(cond
              ;; CL-SC時: gotoによる非局所脱出の面倒を見る
              (lw:*all-in-estack*
               ~((if (< (cast (ptr char) (fref efp -> tmp-esp))
                        (cast (ptr char) efp))
                     ,(if (lw:finfo-parent-func lw:*current-func*)
                          ~(return (fref efp -> tmp-esp))
                        (lw:make-suspend-return)))
                 (= (fref efp -> tmp-esp) 0)
                 (goto LGOTO)
                 ) )
              ;; LW-SC，main および 入れ子関数
              ((or (lw:thread-origin-p (lw:finfo-name lw:*current-func*))
                   (lw:finfo-parent-func lw:*current-func*))
               ~((def goto-fr (ptr char))
                 (= (mref-t (ptr char) esp) 0)
                 ;; フレーム情報保存＆入れ子関数の正規化
                 ,@(lw:make-frame-save)
                 ,@(lw:make-normalize-nf)
                 (= goto-fr (lw-call (fref efp -> tmp-esp)))
                 ,@(unless (lw:thread-origin-p (lw:finfo-name lw:*current-func*))
                     ~((if (and goto-fr
                                (< (cast (ptr char) goto-fr)
                                   (cast (ptr char) efp)))
                           (return goto-fr))))
                 (if (== (cast (ptr char) goto-fr)
                         (cast (ptr char) efp))
                     (goto LGOTO))
                 ,@(lw:make-frame-resume) ; 入れ子関数での変更を反映
                 ) )
              ;; LW-SC，main 以外の通常関数
              (t
               ~(;; フレーム情報の保存,入れ子関数の正規化 
                 ,@(lw:make-frame-save)
                   ,@(lw:make-normalize-nf)
                   ;; call-idの更新
                   (= (fref efp -> call-id) ,(lw:finfo-next-call-id))
                   ;; return
                   ,(lw:make-suspend-return)
                   ;; 復帰位置
                   (label ,(lw:finfo-add-resume-label) ())
                   ;; Cフレーム状態の復元
                   ,@(lw:make-frame-resume)
                   ) ))
           ;; LW-SC時，main/main以外共通（Cスタック積み直しフラグを立てる）
           ,@(unless lw:*all-in-estack*
               ~((= new-esp (+ esp 1)))))) )))
  ;; lightweightのfunction-call
  ;; * argp (estack上の引数の場所へのポインタ)をpush
  ;; * 引数の値も順にpush
  ;; * フレーム情報の保存．resume用のラベル設置，およびresume処理．
  ((#?#3=(the ,texp (call (the (ptr (lightweight ,@texp-list)) ,fexp) ,@exp-list))
    #?(the ,texp0 (= (the ,texp1 ,id) #3#)) )
   (with* (return-p (not (or (lw:thread-origin-p (lw:finfo-name lw:*current-func*))
                              (lw:finfo-parent-func lw:*current-func*)
                              lw:*all-in-estack*))
           fexp-ret (expression! ~(the (ptr (lightweight ,@texp-list)) ,fexp))
           exp-rets (mapcar #'expression! exp-list)
           id-ret  (if-pattern-variable id (expression! ~(the ,texp1 ,id)))
           (fp-decl fp-prev fp-id)
           ;; （global化した）入れ子関数ポインタの値を求めて一時変数に保存
           (if (lw:simple-exp-p fexp-ret t) ; 副作用がないことが明らかな場合
               (values nil nil fexp-ret)
             (with* (fp-type (type-expression! ~(ptr (lightweight ,@texp-list)))
                     new-id (generate-id "nf_tmp_fp"))
               (values (lw:finfo-add-local new-id fp-type :system)
                       ~(= ,new-id ,fexp-ret)
                       new-id))))
     (declare (ignorable id-ret))
     ;; 関数内に入れ子関数が存在する（argpが必要である）フラグ
     (setf (lw:finfo-argp lw:*current-func*) t)
     ;; 追加の一時変数が発生していれば宣言を追加
     (when fp-decl (lw:add-local-decl fp-decl))
     ;; 返り値
     ~(begin
       ,.(unless return-p
           (list ~(def goto-fr (ptr char)) ))
       ,.(when fp-prev (list fp-prev))
       (= argp (aligned-add esp (sizeof (ptr char))))
       ;; 引数を順にpush（先頭の引数がtopにくるように）
       ,.(loop for exp-ret in (reverse exp-rets)
             collect (with1 type (gettype exp-ret) ~(push-arg ,type ,exp-ret argp)))
       ;; 入れ子関数へのポインタをargpに置く
       (= (mref-t (ptr closure-t) argp) ,fp-id)
       ;; 入れ子関数の正規化（CL-SCでは関数の先頭ですでにやっている）
       ,@(unless lw:*all-in-estack* (lw:make-normalize-nf))
       ;; フレーム情報（今実行中の関数の局所変数や引数）の保存
       ,@(lw:make-frame-save)
       ,@(when return-p
           ~((= (fref efp -> argp) argp) ; 後で返り値を獲得するため
             (= (fref efp -> tmp-esp) argp))) ; returnしながら伝えるため
       ,@(if return-p
             ;; LW-SC時，main以外の関数
             ~(;; call-idの更新．入れ子関数実行後この場所に戻ってこれるように
               (= (fref efp -> call-id) ,(lw:finfo-next-call-id))
               ;; return文（Cスタックの巻き戻し開始）
               ,(lw:make-suspend-return)
               ;; 復帰位置のラベル．入れ子関数の実行後，ここにgotoで跳んでくる．
               (label ,(lw:finfo-add-resume-label) nil)
               ;; Cフレーム情報の復元
               ,@(lw:make-frame-resume))
             ;; CL-SC時，またはLW-SC時のmainおよび入れ子関数
             ~((= goto-fr (lw-call argp))
               (if goto-fr              ; 正常終了 or gotoによる非局所脱出のチェック
                                        ; gotoなら，goto-frにはジャンプ先関数のestack上のフレームポインタ
                   (if (< (cast (ptr char) goto-fr)
                          (cast (ptr char) efp))
                       ;; 自分より前の関数がジャンプ先
                       ,(if (lw:finfo-parent-func lw:*current-func*)
                            ~(return goto-fr)
                            ~(begin
                              (= (fref efp -> tmp-esp) goto-fr)
                              ,(lw:make-suspend-return)))
                     ;; 自分がジャンプ先
                     ;; -> 関数の先頭にある swtich-case-gotoによって所望の場所にジャンプ
                     (begin
                      (= (fref efp -> tmp-esp) 0)
                      (goto LGOTO))))
               ;; 正常終了なら続きをやる．
               ;; LW-SCでもmainのフレームは潰されていないが，
               ;; 入れ子関数によって書き換えられているかもしれないのでresumeは必要．
               ,@(unless lw:*all-in-estack* (lw:make-frame-resume)))
             )
       ;; 返り値をestackから獲得
       ,@(if-pattern-variable id
             ~((= ,id-ret (mref-t ,texp1 ,(if return-p ~(fref efp -> argp) ~argp)) ))))))
  ;; 識別子：
  ;; ＊ 入れ子関数内における親関数の変数への参照は xfp->idの形に置き換える
  ;; ＊ ポインタを獲得しているローカル変数への参照は efp->id に置き換える
  ;; ＊ 入れ子関数への参照は estack への参照に置き換える
  (#?(the ,texp ,id[identifier])
   (multiple-value-bind (n-up kind find-finfo) (lw:howmany-outer id)
     (case kind
       ((:var)
        (acond 
         ;; 親関数のid -- "xfp->..."
         ((> n-up 0)
          ~(fref 
            ,@(apply #'append
                     (make-list n-up :initial-element ~(xfp ->)) )
            ,id))
         ;; 明示的スタックの現在のフレームに置かれたもの -- "efp->... "
         ((and (= n-up 0) (lw:estack-variable-p id find-finfo t))
          ~(the ,texp (fref efp -> ,id)) )
         ;; static定義されたlocal変数 -> 名前をext-idに変更
         ((and (= n-up 0) (lw:static-variable-p id find-finfo t))
          ~(the ,texp ,it))
         ;; その他．処理不要
         (t ~(the ,texp ,id)) ))
       ((:nestfunc)
        (cond
         ((> n-up 0)
          ~(ptr (fref
                 ,@(apply #'append
                          (make-list n-up :initial-element ~(xfp ->)) )
                 ,id)) )
         (t
          ~(ptr (fref efp -> ,id))) ))
       ((nil)                           ; 処理不要
        ~(the ,texp ,id) )
       (otherwise
        (ierror "Unknown kind of variable: ~S." kind)) )) )
  )

;;; expression-with-typeinfo からtype-expressionを得る。
(defrule gettype nestfunc
  ((#?(the ,texp ,exp))
   texp)
  (otherwise
   (ierror "gettype: ~S is not expression." x))
  )

;;; body中の ptrでポインタを獲得している変数のリストを返す
(defrule search-ptr nestfunc
  ((#?(,@body))
   (remove-duplicates (mapcan #'search-ptr2 body) :test #'eq))
  )
(defrule search-ptr2 nestfunc
  ((#?(the ,texp1 (ptr (the ,texp2 ,exp))))
   (cond ((identifier exp)
          (list exp))
         ((listp exp)
          (mapcan #'search-ptr2 ~(the ,texp2 ,exp)))
         (t
          nil)) )
  ((#?(the ,texp1 (fref ,exp-t ,@rem)))
   (search-ptr2 exp-t) )
  ((#?(,@list))
   (mapcan #'search-ptr2 list) )
  (otherwise
   nil) )
